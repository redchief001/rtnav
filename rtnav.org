* rtnav.el - A todo list generator and quick source tree navigator
** Description
** Usage
   < Usage to be determined >
*** Basic requirements and functions [28%]
    - [ ] Parse a directory tree recursively searching for annotations
      (like TODO, NOTE, XXXX, and FIXME in comments) in each source code file
      in the working tree.
    - [ ] Compile the annotations, line numbers, and associated file names
      in a buffer that gets displayed to the user.
    - [ ] The items extracted from the task list item should include a file
      name and a line number (integer) along with the annotation itself.
    - [ ] The list entry are used to open the associated file in its own window
      with the point at the line number indicated.
    - [ ] Process is repeated as long as the buffer is live
    - [X] Enable the user to parse a task list item with a command and key
      binding.
    - [X] Display the generated task list file in a new window.
*** These are the things that should happen when using the mode:
    1. The mode will prompt the user for a project root path (the defalut will be
       the default path of the current buffer)
    2. The mode will use the user input as the argument for the
       directory-files-recursive function.
    3. Each file in the list will be searched and the annotations and associated
       text and meta-data will be extracted.
    4. The extracted information will be written to  a buffer and displayed to the
       user.
    5. When the user invokes the proper key command while point is on a list item,
       the associated source file will be displayed in the other window with the
       point at the location of the annotation.
    6. Once the user has completed the task that was annotated, they will then
       erase the annotation text from the source file and save the buffer.
    7. When the buffer containing the annotation is saved, the list is re-compiled
       and should display the updated tasks/annotations.
    8. When the user invokes the 'save task list to file' command, the contents
       of the task list buffer are written to an output file at the project
       directory root.
    9. When the task list buffer is killed by the user, the mode is automatically
       disabled.
** Tasks
*** To do list [71%]
    - [ ] Finish the test cases necessary to have basic functionality.
    - [ ] Add the completed functions to the minor mode
    - [X] Rename the library file and/or consolidate it with the mode source
      file.
    - [X] Consider organic list generation with lisp -- we are doing this shit!
    - [X] Factor out some test scaffolding in the form of test fixtures.
    - [X] Figure out how to use a temp buffer for testing.
    - [X] Create a library file to stage functions (right now they are in the
      rtlib.el file)
*** Milestones
**** [2014-08-04 Mon]
     Today I finally finished with merging the functions in the library file
     with the source file for the minor mode. Thanks to a few good tutorials on
     the matter, I have a working shell of a minor mode now that I can work the
     functions into one by one. This is exciting! I am starting to finally get
     this thing together! While I am still a little ways off from an actual
     release, I can actually see it from here...

     Note to self: don't get lazy when using ERT! If this code will be useful
     to anyone else it will need decent tests!
*** Bugs and known issues
**** Bugs
**** Other
